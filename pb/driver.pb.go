// Code generated by protoc-gen-go. DO NOT EDIT.
// source: driver.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DriverInfoReq struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriverInfoReq) Reset()         { *m = DriverInfoReq{} }
func (m *DriverInfoReq) String() string { return proto.CompactTextString(m) }
func (*DriverInfoReq) ProtoMessage()    {}
func (*DriverInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{0}
}

func (m *DriverInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriverInfoReq.Unmarshal(m, b)
}
func (m *DriverInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriverInfoReq.Marshal(b, m, deterministic)
}
func (m *DriverInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverInfoReq.Merge(m, src)
}
func (m *DriverInfoReq) XXX_Size() int {
	return xxx_messageInfo_DriverInfoReq.Size(m)
}
func (m *DriverInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DriverInfoReq proto.InternalMessageInfo

func (m *DriverInfoReq) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DriverInfoReq) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type DriverInfoResp struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	AccountNum           int64    `protobuf:"varint,4,opt,name=account_num,json=accountNum,proto3" json:"account_num,omitempty"`
	Asset                float32  `protobuf:"fixed32,5,opt,name=asset,proto3" json:"asset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriverInfoResp) Reset()         { *m = DriverInfoResp{} }
func (m *DriverInfoResp) String() string { return proto.CompactTextString(m) }
func (*DriverInfoResp) ProtoMessage()    {}
func (*DriverInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{1}
}

func (m *DriverInfoResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriverInfoResp.Unmarshal(m, b)
}
func (m *DriverInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriverInfoResp.Marshal(b, m, deterministic)
}
func (m *DriverInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverInfoResp.Merge(m, src)
}
func (m *DriverInfoResp) XXX_Size() int {
	return xxx_messageInfo_DriverInfoResp.Size(m)
}
func (m *DriverInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_DriverInfoResp proto.InternalMessageInfo

func (m *DriverInfoResp) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DriverInfoResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DriverInfoResp) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *DriverInfoResp) GetAccountNum() int64 {
	if m != nil {
		return m.AccountNum
	}
	return 0
}

func (m *DriverInfoResp) GetAsset() float32 {
	if m != nil {
		return m.Asset
	}
	return 0
}

type DriverReq struct {
	DriverId             int64    `protobuf:"varint,1,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	DriverName           string   `protobuf:"bytes,2,opt,name=driver_name,json=driverName,proto3" json:"driver_name,omitempty"`
	Location             string   `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Car                  string   `protobuf:"bytes,4,opt,name=car,proto3" json:"car,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriverReq) Reset()         { *m = DriverReq{} }
func (m *DriverReq) String() string { return proto.CompactTextString(m) }
func (*DriverReq) ProtoMessage()    {}
func (*DriverReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{2}
}

func (m *DriverReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriverReq.Unmarshal(m, b)
}
func (m *DriverReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriverReq.Marshal(b, m, deterministic)
}
func (m *DriverReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverReq.Merge(m, src)
}
func (m *DriverReq) XXX_Size() int {
	return xxx_messageInfo_DriverReq.Size(m)
}
func (m *DriverReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverReq.DiscardUnknown(m)
}

var xxx_messageInfo_DriverReq proto.InternalMessageInfo

func (m *DriverReq) GetDriverId() int64 {
	if m != nil {
		return m.DriverId
	}
	return 0
}

func (m *DriverReq) GetDriverName() string {
	if m != nil {
		return m.DriverName
	}
	return ""
}

func (m *DriverReq) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *DriverReq) GetCar() string {
	if m != nil {
		return m.Car
	}
	return ""
}

type DriverResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	PassengerName        string   `protobuf:"bytes,2,opt,name=passenger_name,json=passengerName,proto3" json:"passenger_name,omitempty"`
	StartTime            int64    `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Origin               string   `protobuf:"bytes,4,opt,name=origin,proto3" json:"origin,omitempty"`
	Destination          string   `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	Path                 string   `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DriverResp) Reset()         { *m = DriverResp{} }
func (m *DriverResp) String() string { return proto.CompactTextString(m) }
func (*DriverResp) ProtoMessage()    {}
func (*DriverResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_521003751d596b5e, []int{3}
}

func (m *DriverResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DriverResp.Unmarshal(m, b)
}
func (m *DriverResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DriverResp.Marshal(b, m, deterministic)
}
func (m *DriverResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriverResp.Merge(m, src)
}
func (m *DriverResp) XXX_Size() int {
	return xxx_messageInfo_DriverResp.Size(m)
}
func (m *DriverResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DriverResp.DiscardUnknown(m)
}

var xxx_messageInfo_DriverResp proto.InternalMessageInfo

func (m *DriverResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *DriverResp) GetPassengerName() string {
	if m != nil {
		return m.PassengerName
	}
	return ""
}

func (m *DriverResp) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *DriverResp) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *DriverResp) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *DriverResp) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func init() {
	proto.RegisterType((*DriverInfoReq)(nil), "pb.DriverInfoReq")
	proto.RegisterType((*DriverInfoResp)(nil), "pb.DriverInfoResp")
	proto.RegisterType((*DriverReq)(nil), "pb.DriverReq")
	proto.RegisterType((*DriverResp)(nil), "pb.DriverResp")
}

func init() {
	proto.RegisterFile("driver.proto", fileDescriptor_521003751d596b5e)
}

var fileDescriptor_521003751d596b5e = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xc1, 0x8a, 0xdb, 0x30,
	0x10, 0xc5, 0x71, 0xec, 0xc6, 0x93, 0x3a, 0xb4, 0x43, 0x69, 0x4d, 0x4a, 0xa9, 0x31, 0x14, 0x42,
	0x0f, 0x39, 0xb4, 0xd0, 0x2f, 0x28, 0x84, 0x5c, 0x52, 0x50, 0x73, 0x0f, 0x8a, 0xad, 0xcd, 0x8a,
	0x5d, 0x4b, 0x5a, 0x49, 0x4e, 0xfe, 0x60, 0xbf, 0x69, 0x3f, 0x6f, 0x91, 0xe4, 0x24, 0xce, 0xde,
	0xe6, 0xbd, 0x91, 0xdf, 0x7b, 0x33, 0x1e, 0x78, 0xdf, 0x68, 0x7e, 0x64, 0x7a, 0xa9, 0xb4, 0xb4,
	0x12, 0x47, 0x6a, 0x5f, 0xad, 0x20, 0xff, 0xeb, 0xb9, 0xb5, 0xb8, 0x93, 0x84, 0x3d, 0xe1, 0x1c,
	0x26, 0x9d, 0x61, 0x5a, 0xd0, 0x96, 0x15, 0x51, 0x19, 0x2d, 0x32, 0x72, 0xc1, 0xae, 0xa7, 0xa8,
	0x31, 0x27, 0xa9, 0x9b, 0x62, 0x14, 0x7a, 0x67, 0x5c, 0x3d, 0x47, 0x30, 0x1b, 0x2a, 0x19, 0x85,
	0x5f, 0xe0, 0x9d, 0xfb, 0x74, 0xc7, 0x1b, 0xaf, 0x14, 0x93, 0xd4, 0xc1, 0x75, 0x83, 0x08, 0x63,
	0xaf, 0x1f, 0x34, 0x7c, 0x8d, 0x1f, 0x20, 0xa6, 0x07, 0x56, 0xc4, 0x65, 0xb4, 0x48, 0x88, 0x2b,
	0xf1, 0x3b, 0x4c, 0x69, 0x5d, 0xcb, 0x4e, 0xd8, 0x9d, 0xe8, 0xda, 0x62, 0xec, 0x25, 0xa0, 0xa7,
	0x36, 0x5d, 0x8b, 0x9f, 0x20, 0xa1, 0xc6, 0x30, 0x5b, 0x24, 0x65, 0xb4, 0x18, 0x91, 0x00, 0xaa,
	0x13, 0x64, 0x21, 0x87, 0x9b, 0xe6, 0x2b, 0x64, 0x61, 0xe4, 0x6b, 0x88, 0x49, 0x20, 0xd6, 0x8d,
	0x33, 0xe8, 0x9b, 0x83, 0x34, 0x10, 0xa8, 0x4d, 0x3f, 0xef, 0xa3, 0xac, 0xa9, 0xe5, 0x52, 0xf8,
	0x60, 0x19, 0xb9, 0x60, 0x97, 0xb7, 0xa6, 0xda, 0xa7, 0xca, 0x88, 0x2b, 0xab, 0x97, 0x08, 0xe0,
	0xec, 0x6c, 0x14, 0x7e, 0x86, 0xd4, 0x58, 0x6a, 0x3b, 0xe3, 0x7d, 0x27, 0xa4, 0x47, 0xf8, 0x03,
	0x66, 0x6e, 0x69, 0x4c, 0x1c, 0x6e, 0x8d, 0xf3, 0x0b, 0xeb, 0xbd, 0xbf, 0x01, 0x18, 0x4b, 0xb5,
	0xdd, 0x59, 0xde, 0x86, 0xb5, 0xc4, 0x24, 0xf3, 0xcc, 0x96, 0xb7, 0xcc, 0xa9, 0x4b, 0xcd, 0x0f,
	0x5c, 0xf4, 0x09, 0x7a, 0x84, 0x25, 0x4c, 0x1b, 0x66, 0x2c, 0x17, 0x21, 0x75, 0xe2, 0x9b, 0x43,
	0xca, 0x2d, 0x5f, 0x51, 0x7b, 0x5f, 0xa4, 0x61, 0xf9, 0xae, 0xfe, 0x65, 0xce, 0x57, 0xf0, 0x9f,
	0xe9, 0x23, 0xaf, 0x19, 0xfe, 0x81, 0x7c, 0xc5, 0xec, 0xf5, 0x7f, 0xe2, 0xc7, 0xa5, 0xda, 0x2f,
	0x6f, 0x2e, 0x65, 0x8e, 0x6f, 0x29, 0xa3, 0xf0, 0x27, 0x64, 0x5b, 0xfa, 0xc0, 0xfe, 0xe9, 0x86,
	0x69, 0xcc, 0xaf, 0x0f, 0xdc, 0xfb, 0xd9, 0x10, 0x1a, 0xb5, 0x4f, 0xfd, 0x15, 0xfe, 0x7e, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x22, 0x2a, 0x19, 0xb5, 0x95, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DriverServiceClient is the client API for DriverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DriverServiceClient interface {
	GetDriverInfo(ctx context.Context, in *DriverInfoReq, opts ...grpc.CallOption) (*DriverInfoResp, error)
	TakeOrder(ctx context.Context, in *DriverReq, opts ...grpc.CallOption) (*DriverResp, error)
}

type driverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverServiceClient(cc grpc.ClientConnInterface) DriverServiceClient {
	return &driverServiceClient{cc}
}

func (c *driverServiceClient) GetDriverInfo(ctx context.Context, in *DriverInfoReq, opts ...grpc.CallOption) (*DriverInfoResp, error) {
	out := new(DriverInfoResp)
	err := c.cc.Invoke(ctx, "/pb.DriverService/GetDriverInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverServiceClient) TakeOrder(ctx context.Context, in *DriverReq, opts ...grpc.CallOption) (*DriverResp, error) {
	out := new(DriverResp)
	err := c.cc.Invoke(ctx, "/pb.DriverService/TakeOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServiceServer is the server API for DriverService service.
type DriverServiceServer interface {
	GetDriverInfo(context.Context, *DriverInfoReq) (*DriverInfoResp, error)
	TakeOrder(context.Context, *DriverReq) (*DriverResp, error)
}

// UnimplementedDriverServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDriverServiceServer struct {
}

func (*UnimplementedDriverServiceServer) GetDriverInfo(ctx context.Context, req *DriverInfoReq) (*DriverInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDriverInfo not implemented")
}
func (*UnimplementedDriverServiceServer) TakeOrder(ctx context.Context, req *DriverReq) (*DriverResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeOrder not implemented")
}

func RegisterDriverServiceServer(s *grpc.Server, srv DriverServiceServer) {
	s.RegisterService(&_DriverService_serviceDesc, srv)
}

func _DriverService_GetDriverInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).GetDriverInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DriverService/GetDriverInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).GetDriverInfo(ctx, req.(*DriverInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DriverService_TakeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServiceServer).TakeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DriverService/TakeOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServiceServer).TakeOrder(ctx, req.(*DriverReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DriverService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DriverService",
	HandlerType: (*DriverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDriverInfo",
			Handler:    _DriverService_GetDriverInfo_Handler,
		},
		{
			MethodName: "TakeOrder",
			Handler:    _DriverService_TakeOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver.proto",
}
